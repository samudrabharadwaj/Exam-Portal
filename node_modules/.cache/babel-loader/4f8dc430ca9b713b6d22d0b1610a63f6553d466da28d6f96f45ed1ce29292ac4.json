{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isUnitless = isUnitless;\nexports.getUnit = getUnit;\nexports.toUnitless = toUnitless;\nexports.convertLength = convertLength;\nexports.alignProperty = alignProperty;\nexports.fontGrid = fontGrid;\nexports.responsiveProperty = responsiveProperty;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\nfunction getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\nfunction toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\nfunction convertLength(baseFontSize) {\n  return function (length, toUnit) {\n    var fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n    var pxLength = toUnitless(length);\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n        return length;\n      }\n    } // Convert length in pixels to the output unit\n\n    var outputLength = pxLength;\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nfunction alignProperty(_ref) {\n  var size = _ref.size,\n    grid = _ref.grid;\n  var sizeBelow = size - size % grid;\n  var sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nfunction fontGrid(_ref2) {\n  var lineHeight = _ref2.lineHeight,\n    pixels = _ref2.pixels,\n    htmlFontSize = _ref2.htmlFontSize;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n *\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\nfunction responsiveProperty(_ref3) {\n  var cssProperty = _ref3.cssProperty,\n    min = _ref3.min,\n    max = _ref3.max,\n    _ref3$unit = _ref3.unit,\n    unit = _ref3$unit === void 0 ? 'rem' : _ref3$unit,\n    _ref3$breakpoints = _ref3.breakpoints,\n    breakpoints = _ref3$breakpoints === void 0 ? [600, 960, 1280] : _ref3$breakpoints,\n    _ref3$transform = _ref3.transform,\n    transform = _ref3$transform === void 0 ? null : _ref3$transform;\n  var output = (0, _defineProperty2.default)({}, cssProperty, \"\".concat(min).concat(unit));\n  var factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(function (breakpoint) {\n    var value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[\"@media (min-width:\".concat(breakpoint, \"px)\")] = (0, _defineProperty2.default)({}, cssProperty, \"\".concat(Math.round(value * 10000) / 10000).concat(unit));\n  });\n  return output;\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","isUnitless","getUnit","toUnitless","convertLength","alignProperty","fontGrid","responsiveProperty","_defineProperty2","String","parseFloat","length","input","match","baseFontSize","toUnit","fromUnit","pxLength","outputLength","toFixed","_ref","size","grid","sizeBelow","sizeAbove","_ref2","lineHeight","pixels","htmlFontSize","_ref3","cssProperty","min","max","_ref3$unit","unit","_ref3$breakpoints","breakpoints","_ref3$transform","transform","output","default","concat","factor","forEach","breakpoint","Math","round"],"sources":["C:/Users/sambh/OneDrive/Desktop/exam-portal/node_modules/@material-ui/core/styles/cssUtils.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isUnitless = isUnitless;\nexports.getUnit = getUnit;\nexports.toUnitless = toUnitless;\nexports.convertLength = convertLength;\nexports.alignProperty = alignProperty;\nexports.fontGrid = fontGrid;\nexports.responsiveProperty = responsiveProperty;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\n\nfunction getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\n\nfunction toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\n\nfunction convertLength(baseFontSize) {\n  return function (length, toUnit) {\n    var fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    var pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n        return length;\n      }\n    } // Convert length in pixels to the output unit\n\n\n    var outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\n\nfunction alignProperty(_ref) {\n  var size = _ref.size,\n      grid = _ref.grid;\n  var sizeBelow = size - size % grid;\n  var sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\n\nfunction fontGrid(_ref2) {\n  var lineHeight = _ref2.lineHeight,\n      pixels = _ref2.pixels,\n      htmlFontSize = _ref2.htmlFontSize;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n *\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\n\nfunction responsiveProperty(_ref3) {\n  var cssProperty = _ref3.cssProperty,\n      min = _ref3.min,\n      max = _ref3.max,\n      _ref3$unit = _ref3.unit,\n      unit = _ref3$unit === void 0 ? 'rem' : _ref3$unit,\n      _ref3$breakpoints = _ref3.breakpoints,\n      breakpoints = _ref3$breakpoints === void 0 ? [600, 960, 1280] : _ref3$breakpoints,\n      _ref3$transform = _ref3.transform,\n      transform = _ref3$transform === void 0 ? null : _ref3$transform;\n  var output = (0, _defineProperty2.default)({}, cssProperty, \"\".concat(min).concat(unit));\n  var factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(function (breakpoint) {\n    var value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[\"@media (min-width:\".concat(breakpoint, \"px)\")] = (0, _defineProperty2.default)({}, cssProperty, \"\".concat(Math.round(value * 10000) / 10000).concat(unit));\n  });\n  return output;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}